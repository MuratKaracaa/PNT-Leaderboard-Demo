import {
  JwtPayload,
  Secret,
  VerifyOptions,
  SignOptions,
  sign,
  verify,
} from "jsonwebtoken";
import moment from "moment";
import { readFile } from "fs/promises";

import { pathConstants } from "../constants";

// This method is used to create a mock database in MongoDB, to get random country values for the players created.

export const getRandomCountry = (): string => {
  const countryList = [
    "TR",
    "GB",
    "USA",
    "FR",
    "GER",
    "UKR",
    "RUS",
    "CN",
    "ITA",
    "SPA",
    "NOR",
    "DEN",
    "FIN",
  ];
  return countryList[Math.floor(Math.random() * countryList.length)];
};

// This function is used to issue a token for the logged in user.

export const issueToken = async (sub: string): Promise<string> => {
  const PRIV_KEY: Secret = await readFile(
    pathConstants.privateKeyPath,
    "utf-8"
  );
  const iat: number = moment().utc(true).valueOf();
  const payload = { sub, iat } as JwtPayload;
  const tokenSignOptions = {
    expiresIn: "99d",
    algorithm: "RS256",
  } as SignOptions;

  const token: string = sign(payload, PRIV_KEY, tokenSignOptions);
  return token;
};

// This function is used to get the _id value from the token, generated by the mongoose driver, which is also used to create the token itself. It also gives the values exp iat
// but they are not used.

export const decodeToken = async (token: string) => {
  const PUB_KEY: Secret = await readFile(pathConstants.publicKeyPath, "utf-8");
  const verifyOptions = {
    algorithms: ["RS256"],
  } as VerifyOptions;
  return verify(token, PUB_KEY, verifyOptions) as JwtPayload;
};

// This method is used to extract the data we need after reading the stream, in which we store the MongoDB object ID and the money value, which is written there by the
// seeder function.

export const parseDataFromStream = (
  message: [string, [string, string[]][]][]
) => {
  const readDataFromStream = message.flat().slice(-1).flat();
  const [readDataId, data]: any = readDataFromStream.flat();
  const [userId, money] = data;
  return [readDataId, userId, money];
};
